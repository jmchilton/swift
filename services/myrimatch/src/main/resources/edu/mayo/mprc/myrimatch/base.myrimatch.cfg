# Controls the number of charge states that MyriMatch will handle during all stages of the program.
# It is especially important during determination of charge state (see DuplicateSpectra for more information).
NumChargeStates = 3

# The output of a MyriMatch job will be a SQT file for each input file.
# The string specified by this parameter will be appended to each SQT filename.
# It is useful for differentiating jobs within a single directory.
OutputSuffix =

# A useful feature to focus a search on a subset of spectra in a particular data file,
# these two parameters can be set in order to limit the possible range of scan numbers that MyriMatch will read
# from the input data files. By default, all tandem mass spectra in the input files are read in for processing.
StartSpectraScanNum = 0
EndSpectraScanNum = -1

# A useful feature to focus a search on a subset of proteins in the protein database,
# these two parameters can be set in order to limit the range of proteins that MyriMatch will read
# from the protein database. By default, all proteins in the protein database are read in for processing.
StartProteinIndex = 0
EndProteinIndex = -1

# Preprocessing spectra and scoring candidates may take a long time.
# A measure of progress through the protein database will be given on intervals that are specified by this parameter,
# measured in seconds.
StatusUpdateFrequency = 5

# If true, MyriMatch will use the charge state from the input data if it is available.
# If false, or if charge state is not available from a particular spectrum, MyriMatch will use its internal algorithm
# to determine charge state. If, for a given spectrum, MyriMatch uses its internal algorithm to determine
# charge state and the result is multiply charged, that spectrum may be duplicated to other charge
# states (see DuplicateSpectra for more information).
UseChargeStateFromMS = true

# If MyriMatch determines a spectrum to be multiply charged and this parameter is true,
# the spectrum will be copied and treated as if it was all possible charge states from +2 to +<NumChargeStates>.
# If this parameter is false, the spectrum will simply be treated as a +2.
DuplicateSpectra = true

# When preprocessing the experimental spectra, any spectrum with a precursor mass that is less than the
# specified mass will be disqualified. This parameter is useful to eliminate inherently unidentifiable spectra
# from an input data set. A setting of 500 for example, will eliminate most 3-residue matches
# and clean up the output file quite a lot.
MinSequenceMass = 0

# When preprocessing the experimental spectra, any spectrum with a precursor mass that exceeds the specified
# mass will be disqualified
MaxSequenceMass = 10000

# In order to maximize the effectiveness of the MVH scoring algorithm, an important step in preprocessing the experimental
# spectra is filtering out noise peaks. Noise peaks are filtered out by sorting the original peaks in descending
# order of intensity, and then picking peaks from that list until the cumulative ion current of the picked peaks
# divided by the total ion current (TIC) is greater than or equal to this parameter.
# Lower percentages mean that less of the spectrums total intensity will be allowed to pass through preprocessing.
# See the section on Advanced Usage for tips on how to use this parameter optimally.
TicCutoffPercentage = 0.98

# Before scoring any candidates, experimental spectra have their peaks stratified into the number of intensity
# classes specified by this parameter. Spectra that are very dense in peaks will likely benefit from more
# intensity classes in order to best take advantage of the variation in peak intensities.
# Spectra that are very sparse will not see much benefit from using many intensity classes.
NumIntensityClasses = 3

# If true, the preprocessing step will correct the precursor mass by adjusting it through a specified range
# in steps of a specified length, finally choosing the optimal adjustment. The optimal adjustment is the one
# that maximizes the sum of products of all complementary peaks in the spectrum.
AdjustPrecursorMass = false

# When adjusting the precursor mass, this parameter sets the lower mass limit of adjustment allowable from
# the original precursor mass, measured in Daltons.
MinPrecursorAdjustment = -2.5

# When adjusting the precursor mass, this parameter sets the upper mass limit of adjustment allowable from the
# original precursor mass, measured in Daltons.
MaxPrecursorAdjustment = 2.5

# When adjusting the precursor mass, this parameter sets the size of the steps between adjustments, measured in Daltons.
PrecursorAdjustmentStep = 0.1

# Deisotoping a spectrum (consolidating isotopic peak intensities into the monoisotopic peaks intensity)
# during preprocessing will significantly improve precursor adjustment, and it may be desirable to keep
# the deisotoped spectrum around for candidate scoring as well.
# Set to 0, no deisotoping will be used.
# Set to 1, deisotoping will be used for precursor adjustment only.
# Set to 2, deisotoping will be used for both precursor adjustment and for candidate scoring.
DeisotopingMode = 0

# When deisotoping a spectrum, an isotopic peak is one that is the mass of a neutron higher than another peak,
# tolerating variation based on the value of this parameter. Deisotoping actually traverses the spectrum
# at multiple charge states, starting from the highest (NumChargeStates) and ending at the lowest.
IsotopeMzTolerance = 0.25

# When adjusting the precursor mass, this parameter controls how much tolerance there is on each side
# of the calculated m/z when looking for a peaks complement.
ComplementMzTolerance = 0.5

# If a residue (or multiple residues) should always be treated as having a modification on their natural mass,
# set this parameter to inform the search engine which residues are modified.
# Residues are entered into this string as a space-delimited list of pairs. Each pair is of the form:
# <AA residue character> <mod mass>
#
# Thus, to treat cysteine as always being carboxymethylated, this parameter would be set to something like the string:
# "C 57"
StaticMods =

# Note: avoid using the "#" symbol in a configuration file since it begins a comment section.
# Using the "#" symbol in a command-line override works fine.
# 
# In order to search a database for potential post-translational modifications of candidate sequences,
# the user must configure this parameter to inform the search engine which residues may be modified.
# Residues that are modifiable are entered into this string in a space-delimited list of triplets.
# Each triplet is of the form:
# <AA motif> <character to represent mod> <mod mass>
#
# Thus, to search for potentially oxidized methionines and phosphorylated serines,
# this parameter would be set to something like the string:
# "M * 15.995 S $ 79.966"
# 
# The AA motif can include multiple residues, and the peptide termini are represented by opening
# "(" and closing ")" parentheses for the N and C termini, respectively. For example, an N terminal
# deamidation of glutamine may be specified by the string:
# "(Q ^ -17"
#  
# If the last residue in the motif is not the residue intended to be modifiable, then use an exclamation mark to
# indicate that the residue preceding the mark is the modifiable residue. Using the previous example,
# "(Q! ^ -17" is an equivalent way to specify it. Another example would be specifying
# the demidation of asparagine when it is N terminal to a glycine, which might look like:
# "N!G @ -17"
# 
# Another possibility is to specify a block of interchangeable residues in the motif, which is supported
# by the "[" and "]" brackets. For example, to specify a potential phosphorylation on any serine,
# threonine, or tyrosine, use the string:
# "[STY] * 79.966"
# 
# The "{" and "}" brackets work in the opposite way as the "[" and "]" brackets, i.e. "{STY} * 79.966"
# specifies a potential phosphorylation on every residue EXCEPT serine, threonine, or tyrosine.
# Both kinds of brackets can be combined with the exclamation mark, in which case the exclamation mark should
# come after the block (because the block counts as a single residue).
# Using the previous example, "[STY]! * 79.966" is an equivalent way to specify it.
# 
# Using the negative multi-residue brackets is the best way to indicate the "any residue except" concept,
# and it works on single residues as well. For example, to specify a mod on lysine except when it is
# at the C terminus of a peptide, use something like the string "K!{)} # 144".
# Another example is specifying the cleavage-blocking homoserine mod in a CnBr digest
# when a serine or threonine is C terminal to a methionine:
# "M![ST] * -29.99"
# 
# Note that it is not currently possible to specify (for example) the non-cleavage-blocking homoserine lactone
# mod in a CnBr digest, because the motif would extend outside of the peptide sequence itself.
# In the future a string like "M!){ST} * -17" might work for that, but for now, if "(" is used
# it must be the first character in the motif, and likewise if ")" is used it must be the last character in a motif.
DynamicMods =

# This parameter sets the maximum number of modified residues that may be in any candidate sequence.
MaxDynamicMods = 2

# This parameter sets the maximum number of candidate sequence matches to report for each spectrum.
MaxResults = 5

# See http://www.ebi.ac.uk/ontology-lookup/browse.do?ontName=MS&termId=MS:1001180&termName=cleavage%20agent%20regular%20%25expression
# Easiest is to pick one of the following:
# Arg-C
# Asp-N
# Asp-N_ambbic
# CNBr
# Chymotrypsin  (allows cut after F,Y,W,L. Disallows cutting before proline)
# Formic_acid (Formic acid)
# Lys-C
# Lys-C/P  (Lys-C, disallowing cutting before proline)
# NoEnzyme (Cuts everywhere)
# PepsinA (Cuts right after F, L)
# TrypChymo (combines "Trypsin/P" and "Chymotrypsin" cleavage rules)
# Trypsin (allows for cut after K or R)
# Trypsin/P (normal trypsin cut, disallows cutting when the site is before a proline)
# V8-DE
# V8-E
CleavageRules = Trypsin/P

# By default, when generating peptides from the protein database,
# a peptide must start after a cleavage and end before a cleavage.
# Setting this parameter to 0 or 1 will reduce that requirement, so that
# neither terminus or only one terminus of the peptide must match one of the
# cleavage rules specified in the CleavageRules parameter.
# This parameter is useful to turn a tryptic digest into a semi-tryptic digest.
NumMinTerminiCleavages = 2

# By default, when generating peptides from the protein database, a peptide may contain any number of missed cleavages.
# A missed cleavage is a site within the peptide that matches one of the cleavage rules (refer to CleavageRules).
# Settings this parameter to some other number will stop generating peptides from a sequence
# if it contains more than the specified number of missed cleavages.
NumMaxMissedCleavages = -1

# If true, the mass of candidate sequences will be calculated using the average masses of its amino acid residues.
# This parameter should be set based on whether the experimental data has precursor masses that are monoisotopic.
# For example, LCQ/LTQ-derived precursors are generally measured by average masses and FT-ICR/Orbitrap-derived
# precursors are generally measured by monoisotopic masses.
UseAvgMassOfSequences = true

# Once a candidate sequence has been generated from the protein database, MyriMatch determines
# which spectra will be compared to the sequence. For each unique charge state of those spectra,
# a set of theoretical fragment ions is generated by one of several different algorithms.
#
# For +1 and +2 precursors, a +1 b and y ion is always predicted at each peptide bond.
#
# For +3 and higher precursors, the fragment ions predicted depend on the way this parameter is set.
# When this parameter is true, then for each peptide bond, an internal calculation is done to estimate
# the basicity of the b and y fragment sequence. The precursors protons are distributed to those ions based on
# that calculation, with the more basic sequence generally getting more of the protons. For example,
# when this parameter is true, each peptide bond of a +3 precursor will either generate a +2 bi and a +1 yi ion,
# or a +1 bi and a +2 yi ion. For a +4 precursor, depending on basicity, a peptide bond breakage may result in a
# +1 bi and a +3 yi ion, a +2 bi and a +2 yi ion, or a +3 bi and a +1 yi ion.
# When this parameter is false, however, ALL possible charge distributions for the fragment ions are generated
# for every peptide bond. So a +3 sequence of length 10 will always have theoretical +1 y5, +2 y5, +1 b5, and +2 b5 ions.
UseSmartPlusThreeModel = true

# A generated sequence candidate is only compared to an experimental spectrum if the candidates mass is within
# this tolerance of the experimental spectrums precursor mass. This value is given in Daltons/z units,
# but the actual tolerance is calculated by multiplying by the charge state.
# This parameter should be set to the tolerance that is desired for +1 spectra.
# At the default value, the precursor mass tolerances are 1.25, 2.5, and 3.75 Da for the first three charge states,
# respectively. This parameter can also be set to use PPM (parts-per-million) accuracy
# when searching ultra-high resolution data (see below).
PrecursorMzTolerance = 1.25

# This parameter specifies the mass units used for PrecursorMzTolerance.
# Allowed values are "daltons" or "ppm" (parts-per-million). This parameter is case-insensitive.
PrecursorMzToleranceUnits = daltons

# This parameter controls how much tolerance there is on each side of the calculated m/z
# when looking for an ion fragment peak during candidate scoring.
FragmentMzTolerance = 0.5 daltons

# This parameter specifies the mass units used for FragmentMzTolerance.
# Allowed values are "daltons" or "ppm" (parts-per-million). This parameter is case-insensitive.
FragmentMzToleranceUnits = daltons

# Before beginning sequence candidate generation and scoring, MyriMatch will do a random sampling of the protein
# database to get an estimate of the number of comparisons that will be done by the job. The bigger the sample size,
# the longer this estimate will take and the more accurate it will be. Of course, if there are fewer proteins
# in the database than the sample size, all proteins will be used in the sampling
# and the number of comparisons will be exact.
ProteinSampleSize = 100

# When stratifying peaks into a specified, fixed number of intensity classes,
# this parameter controls the size of each class relative to the class above it (where the peaks are more intense).
# At default values, if the best class, A, has 1 peak in it, then class B will have 2 peaks in it
# and class C will have 4 peaks.
ClassSizeMultiplier = 2

# This parameter sets a number of batches per node to strive for when using the MPI-based parallelization features.
# Setting this too low means that some nodes will finish before others (idle processor time),
# while setting it too high means more overhead in network transmission as each batch is smaller.
NumBatches = 50

# MyriMatch is designed to take advantage of (symmetric) multiprocessor systems by multithreading the database search.
# A search process on an SMP system will spawn one worker thread for each processing unit (where a processing unit can
# be either a core on a multi-core CPU or a separate CPU entirely). The main thread then generates a list of worker
# numbers which is equal to the number of worker threads multiplied by this parameter. The worker threads then take
# a worker number from the list and use that number to iterate through the protein list. It is possible that
# one thread will be assigned all the proteins that generate a few candidates while another thread is assigned
# all the proteins that generate many candidates, resulting in one thread finishing its searching early.
# By having each thread use multiple worker numbers, the chance of one thread being penalized for picking
# all the easy proteins is reduced because if it finishes early it can just pick a new number.
# The only disadvantage to this system is that picking the new number incurs some overhead because
# of synchronizing with the other worker threads that might be trying to pick a worker number at the same time.
# The default value is a nice compromise between incurring that overhead and minimizing wasted time.
ThreadCountMultiplier = 10

# If true, each process will use all the processing units available on the system it is running on.
UseMultipleProcessors = true
