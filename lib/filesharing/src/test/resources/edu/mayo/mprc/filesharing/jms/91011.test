package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}
package edu.mayo.mprc.filesharing.jms;

import edu.mayo.mprc.MprcException;
import edu.mayo.mprc.filesharing.FileTransferHandler;
import org.apache.activemq.broker.BrokerService;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.URI;

public class JmsFileSharingTest {

	private URI uri;
	private BrokerService broker;
	private static String brokerUri = "tcp://proteomics.mayo.edu:61333";
	private final String sourceFileResourcePath  = "/edu/mayo/mprc/jms/1234.test";

	@BeforeClass
	public void startJmsBroker() {
		try {
			uri = new URI(brokerUri);
			this.broker = new BrokerService();
			this.broker.setPersistent(false);
			this.broker.setUseJmx(true);
			this.broker.addConnector(uri);
			this.broker.start();
		} catch (Exception e) {
			throw new MprcException("Could not start broker for uri " + uri.toString(), e);
		}
	}

	@Test
	public void sharedFileTest() {
	   	JmsFileSharingFactory factory = new JmsFileSharingFactory(uri, null, null);

		FileSharing fileSharing = factory.createJMSFileSharing("test");
		fileSharing.startProcessingRequests();



	}

	@AfterClass
	public void stopJmsBroker() {
		try {
			broker.stop();
			broker.waitUntilStopped();
		} catch (Exception e) {
			throw new MprcException("Could not stop broker", e);
		}
	}
}