    -------------------------------
    Planning a Swift Installation
    -------------------------------
    Mayo Proteomics Research Center
    -------------------------------
    10/15/2007

FIXME: This is outdated.

 Swift is a complex application with a number of dependencies.  While we've attempted to
 simplify these as much as possible, some planning is called for.

Overview of Swift operation

 Data for use in Swift is uploaded to a shared file server which both users
 and Swift have access to.  Users access Swift via a web interface; they first configure parameter sets and create
 fasta databases, the latter of which are deployed automatically to Mascot via a daemon which
 modifies <<<mascot.dat>>>.  Users then browse a directory tree 
 on the shared file system, select files for processing and configure parameters.  Then, users
 submit a search request to Swift.  Swift logs this search request and any subsequent progress
 or error information to a relational database.  Swift sends messages to it's various daemons
 in order to execute a search via (in this version) extract_msn, mascot, sequest, omssa and scaffold.  The results
 files are written back to the shared filesystem, where they can be accessed by users.  Swift
 presents a monitoring page that allows users to guage progress and access their results.

 

Requirements

 Things which must be installed before Swift can be installed:
  
   * Linux.  While it's possible to install Swift on Windows (>=XP); these instructions are
     focused on UNIX/Linux.  Any reasonably recent linux should work.

   * Java 1.5 or 1.6

   * Perl (we use 5.8.8)

   * Mascot (2.1 or 2.2)

   * Scaffold Batch (>=1.7)

   * Database; in theory, any {{{http://www.hibernate.org/353.html}hibernate compatible database}}
     should work; we've tested with:

     * Oracle (10g ie 10.2)

     * H2 (version 1.0.57)

   * wine (we're using 0.9.41)

   * extract_msn executables and DLLs (from <<<C:\\XCalibur\\System\\Programs>>> in Bioworks installation)

     * <<<extract_msn.exe>>>

     * <<<Fileio.dll>>>

     * <<<Fregistry.dll>>>

     * <<<MFC42U.DLL>>>

     * <<<MSVCP60.DLL>>>

     * <<<UnifiedFile.dll>>>

* Non-requirements

  Notable tools/libraries included with and used by swift; you don't need
    to install these as they come bundled with swift.

   * <JMS> -- Swift uses JMS for communicating among machines.
    
   * <Hibernate> -- Swift uses Hibernate to communicate with a relational database.

   * Web server -- it should be possible to run Swift web interface within your organization's web application server.
                                This was not yet tested.


Planning

   * <<Machine Layout>> -- Swift has a number of independent components that can be run either on the 
     same machine or on different machines, as desired.  All these machines must be able to 
     access the shared disk space path (as described below) and must be able to communicate via JMS (ie TCP).

     * Web Server (embedded jetty)

     * Daemons (These daemons are java classes that can be run in a single or multiple JVMs on 
         one or more machines as appropriate.)

       * Swift Searcher (main daemon that coordinates others -- Typically co-located
         with web-server but doesn't need to be.)

       * Mascot (submits mascot searches -- Neededn't be on the same machine as mascot.)

       * MascotDeployer (deploys fasta files to mascot; typically installed on the same
         physical machine as mascot as it must be able to write to mascot install directory, 
         specifically mascot.dat).

       * Scaffold (runs Scaffold batch)

       * BatchConversion (converts RAW files to MGF using extract_msn and wine and must have
         access to these tools.)


   * <<Directory Layout>> -- The following directories must be created, on every machine, before installing swift:

  	 * <<<installPath>>> -- The directory where Swift binaries and logs are placed.
  	   This path can be different on each machine.

  	 * <<<sharedDiskSpacePath>>> -- Swift depends on a shared directory structure; every machine that runs
     a swift component must be able to access this shared directory (although the path to it may
     be different on each machine).  Has these sub directories (these need not be immediate sub-directories):

  	   * <<<rawFileRoot>>> User visible location where raw data are uploaded for processing
  	     and results are stored; this location is typically exported to users via SMB/samba or similar.

  	   * <<<tempFolder>>> Temporary folder (<<<home/mprctest/swift-dev2/temporary>>>)

  	   * <<<curator.RootPath>>> Where DBCurator puts downloaded and generated fasta files.

  	 * <<<extractMsnTemp>>>  Used by <<<extract_msn>>> as a scratch space; this can optionally
  	     be a ram disk (ie tmpfs; we recommend size=300M).
  	   
  	 * <<<extractMsnPath>>> -- Path to <<<extract_msn.exe>>> and DLLs.

  	 * <<<scaffoldInstallPath>>> -- Path to installation directory of scaffoldBatch (should have 
  	   a scaffold-parameters.jar in it).
  	 
   * <<Users>>

     * The user that the Swift daemons and web server run as will run the
       dependent programs (such as extract_msn or scaffold batch), and the output files created by
       these programs will be owned by this user.  Therefor this user must have write access to the
       shared directory.  Also, users of swift, must be able to read the files created by this user.

     * We suggest creating a separate user account for Swift, and ensuring that this account 
       has the same uid on all machines where swift is installed. 

   * <<Umask>>

     * The daemons must produce data that is readable/writable by Swift's users.

     * Solution - the users are in the same group as the daemons, daemons generate files writable by the group

     * <<<umask 002>>> so that the generated files have mask <<<rw-rw-r-->>>

Pre Installation Steps

   [[1]] Configure Swift user

      * Set default umask and default group as appropriate (ie in .bash_profile)

   [[1]] Install and configure Java on your path; to verify, run

+---------------------------
java -version
+---------------------------

   [[1]] Mascot setup:

     * Mascot's <<<data>>> directory must be exported via http.
       On the mascot head node, in httpd.conf (or similar), add:

+--------------------------------------
<Directory /usr/local/mascot22/data>
  Options Indexes  # optional; aids debugging.
  SetOutputFilter DEFLATE # optional; speeds up transfers.
</Directory>
Alias /data /usr/local/mascot22/data 
+--------------------------------------

       replacing <<</usr/local/mascot22/>>> with the path to the mascot installation.  Make sure
       this goes <<before>> any Alias for /mascot.

   [[1]] Install and configure Tomcat
   
+-------------------------------------   
     <Parameter 
         name="environmentXml"
         value="environment.xml"
         override="false"/>
+-------------------------------------
   
   [[1]] Configure a hibernate supported RDBMS.  We'll need to be able to create
     schema (tables, etc) in this database as well as insert, update and delete records.
     Swift accesses the database as a single user.  For this database we'll need:
     
      * a JDBC connect string (such as <<<jdbc:oracle:thin:@delphi:1521:test>>>
      
      * A JDBC driver (such as <<<oracle.jdbc.driver.OracleDriver>>>)
      
      * The hibernate dialect name (such as <<<org.hibernate.dialect.Oracle10gDialect>>>)
   
   [[1]] Create directories as described above.
      
   [[1]] Decide which machines the various daemons will run on.
   
   []
 
